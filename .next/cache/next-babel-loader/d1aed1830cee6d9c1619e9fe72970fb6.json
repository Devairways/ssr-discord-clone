{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nexport var authenticate = function authenticate(username, password) {\n  fetch(\"http://localhost:3000/login\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      name: username,\n      password: password\n    })\n  }).then(function (response) {\n    if (response.status == 200) return response;\n  })[\"catch\"](function (err) {\n    return \"something went wrong error: \".concat(err);\n  });\n};\nexport var registerUser = function registerUser(username, password, email) {\n  return _regeneratorRuntime.async(function registerUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/register\", {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: _JSON$stringify({\n              username: username,\n              password: password,\n              email: email\n            })\n          }).then(function (response) {\n            console.log(response);\n            console.log(response.body);\n            console.log(response.json());\n            if (response.status == 200) return response;\n          })[\"catch\"](function (err) {\n            return \"something went wrong error: \".concat(err);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Roy/Desktop/projects/discorderly/Server/pages/Services/Users.tsx"],"names":["authenticate","username","password","fetch","method","headers","body","name","then","response","status","err","registerUser","email","console","log","json"],"mappings":";;AAGA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAwB;AACnDC,EAAAA,KAAK,CAAC,6BAAD,EAA+B;AAClCC,IAAAA,MAAM,EAAE,MAD0B;AAE5BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFmB;AAM5BC,IAAAA,IAAI,EAAE,gBAAe;AACvBC,MAAAA,IAAI,EAAEN,QADiB;AAEvBC,MAAAA,QAAQ,EAAEA;AAFa,KAAf;AANsB,GAA/B,CAAL,CAWGM,IAXH,CAWQ,UAAAC,QAAQ,EAAI;AACjB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EACC,OAAOD,QAAP;AACE,GAdN,WAeS,UAAAE,GAAG,EAAI;AAAC,iDAAsCA,GAAtC;AAA4C,GAf7D;AAgBC,CAjBK;AAoBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOX,QAAP,EAAiBC,QAAjB,EAA2BW,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACrBV,KAAK,CAAC,gCAAD,EAAkC;AAC3CC,YAAAA,MAAM,EAAE,MADmC;AAErCC,YAAAA,OAAO,EAAE;AACL,wBAAU,kBADL;AAEL,8BAAgB;AAFX,aAF4B;AAMtCC,YAAAA,IAAI,EAAE,gBAAe;AACvBL,cAAAA,QAAQ,EAARA,QADuB;AAEvBC,cAAAA,QAAQ,EAARA,QAFuB;AAGvBW,cAAAA,KAAK,EAALA;AAHuB,aAAf;AANgC,WAAlC,CAAL,CAYJL,IAZI,CAYC,UAAAC,QAAQ,EAAI;AACjBK,YAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAK,YAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACH,IAArB;AACAQ,YAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,IAAT,EAAZ;AACA,gBAAIP,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EACC,OAAOD,QAAP;AACD,WAlBI,WAmBE,UAAAE,GAAG,EAAI;AAAC,yDAAsCA,GAAtC;AAA4C,WAnBtD,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import React from 'react';\n\n\nexport const authenticate = (username, password) => {\n\tfetch(\"http://localhost:3000/login\",{\n\t\t\tmethod: 'POST',\n\t        headers: {\n\t            'Accept': 'application/json',\n\t            'Content-Type': 'application/json'\n\t        },\n\t        body: JSON.stringify({\n\t\t\t    name: username,\n\t\t\t    password: password\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\tif (response.status == 200)\n\t\t\t\t\treturn response\n\t\t    })\n\t\t\t.catch(err => {return `something went wrong error: ${err}`});\n\t}\n\n\nexport const registerUser = async (username, password, email) => {\n await fetch(\"http://localhost:3000/register\",{\n \t\tmethod: 'POST',\n         headers: {\n             'Accept': 'application/json',\n             'Content-Type': 'application/json'\n                   },\n        body: JSON.stringify({\n\t\t    username,\n\t\t    password,\n\t\t    email\n\t\t\t})\n\t\t})\n\t\t.then(response => {\n\t\t\tconsole.log(response)\n\t\t\tconsole.log(response.body)\n\t\t\tconsole.log(response.json())\n\t\t\tif (response.status == 200)\n\t\t\t\treturn response\n\t\t})\n\t\t.catch(err => {return `something went wrong error: ${err}`});\n\t}"]},"metadata":{},"sourceType":"module"}